{"version":3,"sources":["logo.png","components/LaunchItem.js","components/Loader.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","className","classNames","launch_success","mission_name","format","launch_date_local","to","flight_number","Loader","role","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","data","error","launches","JSON","parse","localStorage","getItem","length","setItem","stringify","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cbe50e95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const LaunchItem = ({ launch }) => {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission:{\" \"}\r\n            <span\r\n              className={classNames({\r\n                \"text-success\": launch.launch_success,\r\n                \"text-danger\": !launch.launch_success,\r\n              })}\r\n            >\r\n              {launch.mission_name}\r\n            </span>\r\n          </h4>\r\n          <p>\r\n            Date:{\" \"}\r\n            <Moment format=\"YYYY-MM-DD HH:mm\">\r\n              {launch.launch_date_local}\r\n            </Moment>\r\n          </p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link\r\n            to={`/launch/${launch.flight_number}`}\r\n            className=\"btn btn-secondary\"\r\n          >\r\n            Launch Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { LaunchItem } from \"./LaunchItem\";\r\nimport Loader from \"./Loader\";\r\nimport MissionKey from \"./MissionKey\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query launches {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Launches = () => {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n  const launches = JSON.parse(localStorage.getItem(\"Launches\") || []);\r\n\r\n  if (loading && !launches) return <Loader />;\r\n  //if (error) console.log(error);\r\n  if (!launches.length) {\r\n    localStorage.setItem(\"Launches\", JSON.stringify(data.launches));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">Launches</h1>\r\n      <MissionKey />\r\n      {launches.map((launch) => (\r\n        <LaunchItem key={launch.flight_number} launch={launch} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport classNames from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport function Launch(props) {\r\n  let { flight_number } = props.match.params;\r\n  flight_number = parseInt(flight_number);\r\n\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { flight_number },\r\n  });\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  const {\r\n    mission_name,\r\n    launch_year,\r\n    launch_date_local,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type },\r\n  } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">\r\n        <span className=\"text-dark\">Mission:</span> {mission_name}\r\n      </h1>\r\n      <h4 className=\"mb-3\">Launch Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n        <li className=\"list-group-item\">\r\n          Launch Successful:{\" \"}\r\n          <span\r\n            className={classNames({\r\n              \"text-success\": launch_success,\r\n              \"text-danger\": !launch_success,\r\n            })}\r\n          >\r\n            {launch_success ? \"Yes\" : \"No\"}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n\r\n      <h4 className=\"my-3\">Rocket Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n      </ul>\r\n      <hr />\r\n      <Link to=\"/\" className=\"btn btn-secondary\">\r\n        Back\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport logo from \"./logo.png\";\nimport { Launches } from \"./components/Launches\";\nimport { Launch } from \"./components/Launch\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}